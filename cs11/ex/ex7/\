#!/usr/bin/python3
# -*- coding: utf-8 -*-


def main():
    end_of_input = [ list('.' * 8) for x in range(8)]
    gameCount = 0
    white = {
        "P": [(-1,1),(1,1)],
        "R": [(-1,-1),(1,-1),(-1,1),(1,1)],
        "N": [(-2,-1),(-1,-2),(1,-2),(2,-1),(2,1),(1,2),(-1,2),(-2,1)],
        "B": [(-1,-1),(1,-1),(1,1),(-1,1)],
        "Q": [(-1,-1),(1,-1),(1,1),(-1,1),(-1,-1),(1,-1),(-1,1),(1,1)],
        "K": [(-1,-1),(1,-1),(1,1),(-1,1),(-1,-1),(1,-1),(-1,1),(1,1)]
    }

    black = {
        "p": [(-1,-1),(1,-1)],
        "r": [(-1,-1),(1,-1),(-1,1),(1,1)],
        "n": [(-2,-1),(-1,-2),(1,-2),(2,-1),(2,1),(1,2),(-1,2),(-2,1)],
        "b": [(-1,-1),(1,-1),(1,1),(-1,1)],
        "q": [(-1,-1),(1,-1),(1,1),(-1,1),(-1,-1),(1,-1),(-1,1),(1,1)],
        "k": [(-1,-1),(1,-1),(1,1),(-1,1),(-1,-1),(1,-1),(-1,1),(1,1)]
    }


    config = getConfig(end_of_input)
    while config != end_of_input:
        # dictionaries for holding the coordinates of the pieces
        w_pieces = dict()
        b_pieces = dict()
        danger_zone = []

        gameCount += 1

        # traverses each cell in the matrix
        for row_index in range(len(config)):
            for col_index in range(len(config[0])):

                # constructs the dictionaries for white ang black
                curr_matrix_data = config[row_index][col_index]
                if curr_matrix_data.isalpha():
                    if curr_matrix_data.isupper():
                        if curr_matrix_data not in w_pieces:
                            w_pieces[curr_matrix_data] = [(col_index, row_index)]
                        else:
                            w_pieces[curr_matrix_data].append((col_index, row_index))
                    else:
                        if curr_matrix_data not in b_pieces:
                            b_pieces[curr_matrix_data] = [(col_index, row_index)]
                        else:
                            b_pieces[curr_matrix_data].append((col_index, row_index))
        if getDanger(w_pieces, danger_zone):
            print
        config = getConfig(end_of_input)


def getDanger(KINGDOM, DANGERLIST):
    pass


def getConfig(END_OF_INPUT):
    locList = []
    for count in range(8):
        locList.append(list(input()))
    if locList != END_OF_INPUT:
        input() # skips the new line 
    return locList
        
def printMatrix(pMATRIX):
    for row in pMATRIX:
        for col in row:
            print(col, end='')
        print()


if __name__ == "__main__":
    main()
